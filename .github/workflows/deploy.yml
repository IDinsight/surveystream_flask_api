# # Create GitHub Action to run unit tests inside a Docker container
# name: Deploy API

# on:
#   workflow_run:
#     workflows: [Run Unit Tests]
#     types:
#       - completed
#   push:
#     branch:
#       - DODSS-861-Blue-Green-Backend

# jobs:
#   Deploy-Staging:
#     name: Deploy Callisto Staging
#     runs-on: ubuntu-latest
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}

#     permissions:
#       id-token: write
#       contents: read

#     steps:
#       - uses: actions/checkout@v3
#       - name: Load .env file
#         uses: xom9ikk/dotenv@v1.0.2
#         with:
#           path: ./.github/workflows
#           mode: unittest

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: "arn:aws:iam::${{ env.STAGING_ACCOUNT }}:role/github-actions-role-backend"
#           role-session-name: stagingrolesession
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: web-callisto-ecr-repository
#           IMAGE_TAG: backend
#           BACKEND_NAME: dod_surveystream_backend
#           BACKEND_PORT: 5001
#           VERSION: 0.1

#         run: |
#           docker build -f Dockerfile.api --rm --build-arg NAME=$BACKEND_NAME --build-arg PORT=$BACKEND_PORT --platform=linux/amd64 -t $BACKEND_NAME:$VERSION .
#           docker tag $BACKEND_NAME:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#       - name: Task definition download
#         id: download-task-def
#         env:
#           ecs_task_def_name: backend-task
#         run: |
#           aws ecs describe-task-definition --task-definition "$ecs_task_def_name" --query taskDefinition > task-definition.json

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-definition.json
#           container-name: api
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: backend
#           cluster: web-callisto-cluster
#           wait-for-service-stability: true
